package Analizador_Lexico;

import java_cup.runtime.Symbol;
<<<<<<< HEAD
import java.util.ArrayList;

action code {:
// se utiliza un arraylist para crear la tabla
public ArrayList<String> tabla = new ArrayList();
:}

parser code {:
    
public Arbol arbolSintactico;

    @Override
    public void syntax_error(Symbol sy) {
        Token t=(Token)sy.value;
        done_parsing();
        report_error("Error sintÃ¡ctico cerca de \""+ t.getCadena()+"\" ["+t.getRow()+" : "+t.getCol()+"]",null);
        
    }
:}

init with {: 
    arbolSintactico = new Arbol();
:};

terminal DEVOLVER, NUMERO, TAB, CLASE, FUNCION, SI, SINO, ENTONCES, ESCRIBIR, LEER, DESDE, MIENTRAS, HACER, INCREMENTAR;
terminal ITERAR, PRINCIPAL, CADENA, BOOLEANO, NULO, VERDADERO, FALSO, ELIMINAR, EXTIENDE, ESTATICO, DISY;
terminal CONJ, ID, SUMA, RESTA, MULT, DIV, POTENCIA, MENOR, MAYOR, MODULO, IGUAL, CORCHETEINI, CORCHETEFIN;
terminal DOSP, PCOMA, COMA, PUNTO, PARINI, PARFIN, COMENT, PROPIED, METD, CHAR, ENT, CONST;
non terminal inicio, Devolucion, linea_codigo, Comentarios, Clase, Propiedad, Constructor, MPropied, Metodo;
non terminal Funcion, Condicion, MMetodo, Opcion, MClase, Operaciones, CondicionB;

start with inicio;

inicio ::= linea_codigo:l inicio{:
            parser.arbolSintactico.agregarHijo((Nodo) l);
            :}
            | linea_codigo:l {:
                parser.arbolSintactico.agregarHijo((Nodo) l);
            :};

linea_codigo ::= Devolucion | Comentarios | MClase;

//--------Secciones Simples-----------------------

Devolucion ::= DEVOLVER NUMERO;

Comentarios ::= COMENT;

Clase ::= CLASE ID;

Propiedad ::= PROPIED ID DOSP;

Constructor ::= ENT ID Constructor| CADENA ID Constructor| ESCRIBIR TAB Constructor | CADENA ID| ID ID |ESCRIBIR TAB;

//--------Seccion Metodos, Funcion y Clase--------

Metodo ::= METD ID DOSP;

Funcion ::= ENT ID PARINI ENT ID PARFIN |ENT ID PARINI PARFIN | CONST PARINI PARFIN | ID PARINI PARFIN;

Condicion ::= SI ID CHAR NUMERO ENTONCES Devolucion CondicionB;
CondicionB ::= SINO Devolucion;

Operaciones ::= ID IGUAL TAB Funcion Constructor |
                ID IGUAL ID Funcion Operaciones| ID IGUAL NUMERO Operaciones| ID IGUAL ID Funcion| ID IGUAL NUMERO;

//---------Secciones Mayores---------------------
MPropied ::= Propiedad Constructor;

MMetodo ::= Metodo Funcion Condicion | Metodo Funcion Operaciones;

MClase ::= Clase MPropied MMetodo | Clase MPropied;
=======


/*-------------------Tokens terminales de palabras reservadas-----------------*/
terminal Token NUMERO;
terminal Token ID;
terminal Token INCLUIR;
terminal Token CLASE;
terminal Token FUNCION;
terminal Token SI;
terminal Token SINO;
terminal Token ENTONCES;
terminal Token RETORNAR;
terminal Token ESCRIBIR;
terminal Token ABRIR;
terminal Token DESDE;
terminal Token MIENTRAS;
terminal Token HACER;
terminal Token INCREMENTAR;
terminal Token DECREMENTAR;
terminal Token ITERAR;
terminal Token PARACADA;
terminal Token PRINCIPAL;
terminal Token TNUMERO;
terminal Token CADENA;
terminal Token BOOLEANO;
terminal Token NULO;
terminal Token VERDADERO;
terminal Token FALSO;
terminal Token EN;
terminal Token TARCHIVO;
/*------------------------------------------------------------------------------*/

/*--------------------Tokens terminales de operadores---------------------------*/
terminal Token SUMA;
terminal Token RESTA;
terminal Token MULT;
terminal Token DIV;
terminal Token POTENCIA;
terminal Token MAYOR;
terminal Token MENOR;
terminal Token DISY;
terminal Token CONJ;
terminal Token MODULO;
terminal Token IGUAL;
terminal Token DIGUAL;
/*-------------------------------------------------------------------------------*/

/*----------------------Tokens terminales de signos------------------------------*/
terminal Token CORCHETEINI;
terminal Token CORCHETEFIN;
terminal Token DOSP;
terminal Token PCOMA;
terminal Token COMA;
terminal Token PUNTO;
terminal Token PARINI;
terminal Token PARFIN;
terminal Token LLAVI;
terminal Token LLAVF;
terminal Token TEXTO;
terminal Token TAB;
/*-------------------------------------------------------------------------------*/

/*---------------------- Simbolo no terminales-----------------------------------*/
non terminal PROGRAMA;
non terminal LCODIGO;
non terminal DECCLASE;
non terminal DECFUNCION;
non terminal DECLIBRERIA;
non terminal CODIGO;
non terminal CODIGOCLASE;
non terminal FUNP;
non terminal FUN;
non terminal TIPO;
non terminal PARAMETROSR;
non terminal DECVARIABLE;
non terminal ESCRITURA;
non terminal OPERACION;
non terminal CICLO;
non terminal CONDICION;
non terminal OPERARCHIVO;
non terminal VARIABLES;
non terminal OPERACION1;
non terminal CDESDE;
non terminal CPARACADA;
non terminal VARDESDE;
non terminal TIPOCOND;
non terminal INCREMENTODEC;
non terminal CONDICIONSI;
non terminal SINOCOND;
non terminal SINON;
non terminal TIPOESCRITURA;
non terminal NOMBREARCHIVO;
non terminal OPERACIONARCHIVO;
non terminal ABRIRARCHIVOS;
non terminal DECARCHIVO;
non terminal TIPOCONDICION;
non terminal CODIGOS;
non terminal OPERACIONASIGNACION;
non terminal VARIABLESARCHIVO;
/*-------------------------------------------------------------------------------*/

precedence left SUMA, RESTA;
precedence right MULT, DIV;

start with PROGRAMA;

/*--------------------------------PRODUCCIONES-----------------------------------*/

PROGRAMA ::=  LCODIGO  PROGRAMA 
	    | LCODIGO
            ;

LCODIGO ::=   DECCLASE
            | DECFUNCION
            | DECLIBRERIA
	    | CODIGO
            ;

DECCLASE ::=  CLASE ID DOSP TAB CODIGOCLASE
	    | TAB CLASE ID DOSP TAB CODIGOCLASE
            ;


CODIGOCLASE ::=   DECFUNCION
                | CODIGO
                ;

DECFUNCION ::=    TAB FUNP
		| TAB FUN
		| FUNP
		| FUN
                ;


/*-----------------------------PRODUCCION DE FUNCIONES--------------------------*/

FUNP ::=   FUNCION TIPO ID PARINI PARAMETROSR PARFIN DOSP TAB CODIGO
	 | FUNCION ID PARINI PARAMETROSR PARFIN DOSP TAB CODIGO
         ;

FUN  ::=   FUNCION TIPO ID PARINI PARFIN  DOSP TAB CODIGO
	 | FUNCION ID PARINI PARFIN DOSP TAB CODIGO
         ;

PARAMETROSR ::=  TIPO ID COMA PARAMETROSR
	       | TIPO ID
               ;
/*-------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------*/
/*--------------------------PRODUCCION DE LINEAS DE CODIGO-----------------------*/
CODIGO ::=   DECVARIABLE PCOMA
	   | ESCRITURA PCOMA
	   | OPERACIONASIGNACION PCOMA
	   | CICLO
	   | CONDICION  
	   | OPERARCHIVO PCOMA
	   | DECARCHIVO PCOMA
           ;

/*-------------------------------------------------------------------------------*/

DECVARIABLE  ::=  TIPO VARIABLES 
                ;

VARIABLES ::=   ID COMA VARIABLES
	      | ID 
              ;

TIPO ::=   TNUMERO
         | CADENA
         | BOOLEANO
         ;
/*-------------------------------------------------------------------------------*/

OPERACIONASIGNACION ::= ID IGUAL OPERACION
                        ;

OPERACION ::=     ID OPERACION1
		| NUMERO OPERACION1
		| ID
		| NUMERO
                ;

OPERACION1 ::=    SUMA OPERACION
		| RESTA OPERACION
		| MULT OPERACION
		| DIV OPERACION
		| MODULO OPERACION
		| POTENCIA OPERACION
                | CONJ OPERACION
                | DISY OPERACION
                ;

/*----------------------------------------------------------------------------------*/

/*----------------------------------CICLOS------------------------------------------*/

CICLO ::=   CDESDE
	  | CPARACADA
          ;


CDESDE ::=  DESDE PARINI VARDESDE MIENTRAS ID TIPOCOND NUMERO INCREMENTODEC NUMERO PARFIN ITERAR DOSP TAB CODIGO
	  | DESDE PARINI VARDESDE MIENTRAS ID TIPOCOND NUMERO PARFIN ITERAR DOSP TAB CODIGO 
          ;

VARDESDE ::= ID IGUAL NUMERO 
             ;

INCREMENTODEC ::= INCREMENTAR
		 |DECREMENTAR
                 ;

/*CPARACADA  ::= PARACADA PARINI ID EN VARARCHIVO PARFIN ITERAR DOSP TAB CODIGO*/

/*-----------------------------------------------------------------------------------*/

/*----------------------------------- CONDICIONES-------------------------------------*/

CODIGOS ::=   TAB CODIGO CODIGOS
            ;

CONDICION ::=  CONDICIONSI CODIGO TIPOCONDICION CODIGO
              ;

TIPOCONDICION ::=  SINOCOND
                 | SINON
                 ;

CONDICIONSI ::= SI PARINI ID TIPOCOND NUMERO PARFIN ENTONCES DOSP 
                ;

TIPOCOND ::=  MENOR
	    | MAYOR
	    | DIGUAL
            ;

SINOCOND ::= SINO PARINI ID TIPOCOND NUMERO PARFIN ENTONCES DOSP  
             ;

/*--------------------------DECLARACION DE ARCHIVOS-------------------------*/

SINON ::= SINO DOSP
          ;
/*------------------------------------------------------------------------------------*/

/*-----------------------------------ESCRITURA------------------------------*/

ESCRITURA ::=    ESCRIBIR TIPOESCRITURA
                ;

TIPOESCRITURA ::=   ID COMA TIPOESCRITURA
		  | TEXTO COMA TIPOESCRITURA
		  | ID
		  | TEXTO
                  ;
/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
 
                     
/*--------------------------------------------------------------------------*/


>>>>>>> oslo
