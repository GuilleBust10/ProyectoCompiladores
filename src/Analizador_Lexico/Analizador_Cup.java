
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador_Lexico;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_Cup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_Cup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_Cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\007\000\002\004\010\000" +
    "\002\010\003\000\002\010\003\000\002\005\004\000\002" +
    "\005\004\000\002\005\003\000\002\005\003\000\002\011" +
    "\013\000\002\011\012\000\002\012\012\000\002\012\011" +
    "\000\002\014\006\000\002\014\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\003\000\002" +
    "\007\003\000\002\007\004\000\002\007\004\000\002\015" +
    "\004\000\002\023\005\000\002\023\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\044\005\000" +
    "\002\017\004\000\002\017\004\000\002\017\003\000\002" +
    "\017\003\000\002\024\004\000\002\024\004\000\002\024" +
    "\004\000\002\024\004\000\002\024\004\000\002\024\004" +
    "\000\002\024\004\000\002\024\004\000\002\020\003\000" +
    "\002\020\003\000\002\025\020\000\002\025\016\000\002" +
    "\027\005\000\002\031\003\000\002\031\003\000\002\043" +
    "\005\000\002\021\006\000\002\042\003\000\002\042\003" +
    "\000\002\032\012\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\033\012\000\002\034\004\000\002" +
    "\016\004\000\002\035\005\000\002\035\005\000\002\035" +
    "\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\026\005\021\007\020\010\037\011\030\015" +
    "\031\017\035\027\015\030\007\031\022\066\011\001\002" +
    "\000\004\002\240\001\002\000\004\056\237\001\002\000" +
    "\004\056\236\001\002\000\004\005\uffe1\001\002\000\004" +
    "\056\235\001\002\000\006\007\230\010\037\001\002\000" +
    "\030\002\ufffc\005\ufffc\007\ufffc\010\ufffc\011\ufffc\015\ufffc" +
    "\017\ufffc\027\ufffc\030\ufffc\031\ufffc\066\ufffc\001\002\000" +
    "\030\002\ufff4\005\ufff4\007\ufff4\010\ufff4\011\ufff4\015\ufff4" +
    "\017\ufff4\027\ufff4\030\ufff4\031\ufff4\066\ufff4\001\002\000" +
    "\030\002\ufffb\005\ufffb\007\ufffb\010\ufffb\011\ufffb\015\ufffb" +
    "\017\ufffb\027\ufffb\030\ufffb\031\ufffb\066\ufffb\001\002\000" +
    "\004\005\uffe2\001\002\000\030\002\uffff\005\021\007\020" +
    "\010\037\011\030\015\031\017\035\027\015\030\007\031" +
    "\022\066\011\001\002\000\032\002\uffd2\005\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\015\uffd2\017\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\066\uffd2\001\002\000\004\005\216\001\002" +
    "\000\004\051\170\001\002\000\004\005\uffe0\001\002\000" +
    "\030\002\ufffe\005\ufffe\007\ufffe\010\ufffe\011\ufffe\015\ufffe" +
    "\017\ufffe\027\ufffe\030\ufffe\031\ufffe\066\ufffe\001\002\000" +
    "\004\005\164\001\002\000\030\002\ufffd\005\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\015\ufffd\017\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\066\ufffd\001\002\000\032\002\uffe9\005\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\015\uffe9\017\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\066\uffe9\001\002\000\020\005\021\011\030" +
    "\015\031\017\035\027\015\030\007\031\022\001\002\000" +
    "\004\061\137\001\002\000\006\005\130\065\131\001\002" +
    "\000\004\056\127\001\002\000\032\002\uffd1\005\uffd1\007" +
    "\uffd1\010\uffd1\011\uffd1\012\uffd1\015\uffd1\017\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\066\uffd1\001\002\000\004\056\126\001" +
    "\002\000\004\061\074\001\002\000\032\002\uffe8\005\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\015\uffe8\017\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\066\uffe8\001\002\000\012\005\041" +
    "\027\015\030\007\031\022\001\002\000\030\002\ufff3\005" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\015\ufff3\017\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\066\ufff3\001\002\000\004\061\062\001" +
    "\002\000\004\005\043\001\002\000\004\061\044\001\002" +
    "\000\012\027\015\030\007\031\022\062\046\001\002\000" +
    "\004\062\056\001\002\000\004\055\053\001\002\000\004" +
    "\005\050\001\002\000\006\057\051\062\uffed\001\002\000" +
    "\010\027\015\030\007\031\022\001\002\000\004\062\uffee" +
    "\001\002\000\004\066\054\001\002\000\020\005\021\011" +
    "\030\015\031\017\035\027\015\030\007\031\022\001\002" +
    "\000\030\002\ufff0\005\ufff0\007\ufff0\010\ufff0\011\ufff0\015" +
    "\ufff0\017\ufff0\027\ufff0\030\ufff0\031\ufff0\066\ufff0\001\002" +
    "\000\004\055\057\001\002\000\004\066\060\001\002\000" +
    "\020\005\021\011\030\015\031\017\035\027\015\030\007" +
    "\031\022\001\002\000\030\002\ufff2\005\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\015\ufff2\017\ufff2\027\ufff2\030\ufff2\031\ufff2" +
    "\066\ufff2\001\002\000\012\027\015\030\007\031\022\062" +
    "\064\001\002\000\004\062\070\001\002\000\004\055\065" +
    "\001\002\000\004\066\066\001\002\000\020\005\021\011" +
    "\030\015\031\017\035\027\015\030\007\031\022\001\002" +
    "\000\030\002\uffef\005\uffef\007\uffef\010\uffef\011\uffef\015" +
    "\uffef\017\uffef\027\uffef\030\uffef\031\uffef\066\uffef\001\002" +
    "\000\004\055\071\001\002\000\004\066\072\001\002\000" +
    "\020\005\021\011\030\015\031\017\035\027\015\030\007" +
    "\031\022\001\002\000\030\002\ufff1\005\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\015\ufff1\017\ufff1\027\ufff1\030\ufff1\031\ufff1" +
    "\066\ufff1\001\002\000\004\005\075\001\002\000\004\051" +
    "\124\001\002\000\004\020\077\001\002\000\004\005\100" +
    "\001\002\000\010\044\104\045\102\052\101\001\002\000" +
    "\004\004\uffc4\001\002\000\004\004\uffc6\001\002\000\004" +
    "\004\105\001\002\000\004\004\uffc5\001\002\000\010\022" +
    "\111\023\107\062\110\001\002\000\004\004\116\001\002" +
    "\000\004\004\uffcc\001\002\000\004\024\112\001\002\000" +
    "\004\004\uffcd\001\002\000\004\055\113\001\002\000\004" +
    "\066\114\001\002\000\020\005\021\011\030\015\031\017" +
    "\035\027\015\030\007\031\022\001\002\000\032\002\uffcf" +
    "\005\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\015\uffcf\017" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\066\uffcf\001\002\000\004" +
    "\062\117\001\002\000\004\024\120\001\002\000\004\055" +
    "\121\001\002\000\004\066\122\001\002\000\020\005\021" +
    "\011\030\015\031\017\035\027\015\030\007\031\022\001" +
    "\002\000\032\002\uffd0\005\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\015\uffd0\017\uffd0\027\uffd0\030\uffd0\031\uffd0\066" +
    "\uffd0\001\002\000\004\004\125\001\002\000\004\020\uffce" +
    "\001\002\000\032\002\uffeb\005\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\015\uffeb\017\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\066\uffeb\001\002\000\032\002\uffe6\005\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\015\uffe6\017\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\066\uffe6\001\002\000\006\056\uffbe\057\135\001" +
    "\002\000\006\056\uffbd\057\133\001\002\000\004\056\uffc1" +
    "\001\002\000\006\005\130\065\131\001\002\000\004\056" +
    "\uffbf\001\002\000\006\005\130\065\131\001\002\000\004" +
    "\056\uffc0\001\002\000\004\005\140\001\002\000\010\044" +
    "\104\045\102\052\101\001\002\000\004\004\142\001\002" +
    "\000\004\062\143\001\002\000\004\013\144\001\002\000" +
    "\004\055\145\001\002\000\020\005\uffc7\011\uffc7\015\uffc7" +
    "\017\uffc7\027\uffc7\030\uffc7\031\uffc7\001\002\000\004\012" +
    "\151\001\002\000\020\005\021\011\030\015\031\017\035" +
    "\027\015\030\007\031\022\001\002\000\020\005\uffc8\011" +
    "\uffc8\015\uffc8\017\uffc8\027\uffc8\030\uffc8\031\uffc8\001\002" +
    "\000\006\055\153\061\154\001\002\000\020\005\uffc9\011" +
    "\uffc9\015\uffc9\017\uffc9\027\uffc9\030\uffc9\031\uffc9\001\002" +
    "\000\020\005\uffc2\011\uffc2\015\uffc2\017\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\001\002\000\004\005\155\001\002\000\010" +
    "\044\104\045\102\052\101\001\002\000\004\004\157\001" +
    "\002\000\004\062\160\001\002\000\004\013\161\001\002" +
    "\000\004\055\162\001\002\000\020\005\uffc3\011\uffc3\015" +
    "\uffc3\017\uffc3\027\uffc3\030\uffc3\031\uffc3\001\002\000\032" +
    "\002\uffca\005\uffca\007\uffca\010\uffca\011\uffca\012\uffca\015" +
    "\uffca\017\uffca\027\uffca\030\uffca\031\uffca\066\uffca\001\002" +
    "\000\006\056\uffe3\057\166\001\002\000\004\056\uffe5\001" +
    "\002\000\004\005\164\001\002\000\004\056\uffe4\001\002" +
    "\000\006\004\172\005\171\001\002\000\024\037\176\040" +
    "\204\041\177\042\202\043\175\046\201\047\200\050\203" +
    "\056\uffdc\001\002\000\024\037\176\040\204\041\177\042" +
    "\202\043\175\046\201\047\200\050\203\056\uffdb\001\002" +
    "\000\004\056\uffdf\001\002\000\004\056\uffdd\001\002\000" +
    "\006\004\172\005\171\001\002\000\006\004\172\005\171" +
    "\001\002\000\006\004\172\005\171\001\002\000\006\004" +
    "\172\005\171\001\002\000\006\004\172\005\171\001\002" +
    "\000\006\004\172\005\171\001\002\000\006\004\172\005" +
    "\171\001\002\000\006\004\172\005\171\001\002\000\004" +
    "\056\uffd9\001\002\000\004\056\uffd6\001\002\000\004\056" +
    "\uffd7\001\002\000\004\056\uffd3\001\002\000\004\056\uffd4" +
    "\001\002\000\004\056\uffd8\001\002\000\004\056\uffda\001" +
    "\002\000\004\056\uffd5\001\002\000\004\056\uffde\001\002" +
    "\000\004\055\217\001\002\000\004\066\220\001\002\000" +
    "\024\005\021\010\037\011\030\015\031\017\035\027\015" +
    "\030\007\031\022\066\222\001\002\000\030\002\ufffa\005" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\015\ufffa\017\ufffa\027\ufffa" +
    "\030\ufffa\031\ufffa\066\ufffa\001\002\000\004\010\037\001" +
    "\002\000\030\002\ufff7\005\ufff7\007\ufff7\010\ufff7\011\ufff7" +
    "\015\ufff7\017\ufff7\027\ufff7\030\ufff7\031\ufff7\066\ufff7\001" +
    "\002\000\030\002\ufff8\005\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\015\ufff8\017\ufff8\027\ufff8\030\ufff8\031\ufff8\066\ufff8\001" +
    "\002\000\030\002\ufff6\005\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\015\ufff6\017\ufff6\027\ufff6\030\ufff6\031\ufff6\066\ufff6\001" +
    "\002\000\030\002\ufff5\005\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\015\ufff5\017\ufff5\027\ufff5\030\ufff5\031\ufff5\066\ufff5\001" +
    "\002\000\004\002\000\001\002\000\004\005\231\001\002" +
    "\000\004\055\232\001\002\000\004\066\233\001\002\000" +
    "\024\005\021\010\037\011\030\015\031\017\035\027\015" +
    "\030\007\031\022\066\222\001\002\000\030\002\ufff9\005" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\015\ufff9\017\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\066\ufff9\001\002\000\032\002\uffec\005" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\015\uffec\017\uffec" +
    "\027\uffec\030\uffec\031\uffec\066\uffec\001\002\000\032\002" +
    "\uffe7\005\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\015\uffe7" +
    "\017\uffe7\027\uffe7\030\uffe7\031\uffe7\066\uffe7\001\002\000" +
    "\032\002\uffea\005\uffea\007\uffea\010\uffea\011\uffea\012\uffea" +
    "\015\uffea\017\uffea\027\uffea\030\uffea\031\uffea\066\uffea\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\050\002\003\003\015\004\022\005\024\006" +
    "\011\007\013\011\012\012\037\013\023\015\007\016\033" +
    "\020\025\021\035\022\005\025\016\026\032\032\026\041" +
    "\031\044\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\224\012\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\002" +
    "\226\003\015\004\022\005\024\006\011\007\013\011\012" +
    "\012\037\013\023\015\007\016\033\020\025\021\035\022" +
    "\005\025\016\026\032\032\026\041\031\044\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\007\145\013" +
    "\023\015\007\016\033\020\025\021\035\022\005\025\016" +
    "\026\032\032\026\041\031\044\004\001\001\000\002\001" +
    "\001\000\004\035\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\046\014\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\046\014" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\054\013\023\015\007\016\033\020\025\021\035\022" +
    "\005\025\016\026\032\032\026\041\031\044\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\007\060\013\023\015\007\016\033\020\025\021\035" +
    "\022\005\025\016\026\032\032\026\041\031\044\004\001" +
    "\001\000\002\001\001\000\006\013\046\014\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\007\066\013\023\015\007\016\033\020\025\021\035" +
    "\022\005\025\016\026\032\032\026\041\031\044\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\072\013\023\015\007\016\033\020\025\021" +
    "\035\022\005\025\016\026\032\032\026\041\031\044\004" +
    "\001\001\000\002\001\001\000\004\027\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\114\013\023\015\007\016\033\020\025\021\035\022" +
    "\005\025\016\026\032\032\026\041\031\044\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\122\013\023" +
    "\015\007\016\033\020\025\021\035\022\005\025\016\026" +
    "\032\032\026\041\031\044\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\133\001\001\000\002\001\001\000" +
    "\004\035\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\033\151\034\147\042\146\001\001\000\032\007" +
    "\162\013\023\015\007\016\033\020\025\021\035\022\005" +
    "\025\016\026\032\032\026\041\031\044\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\166\001\001\000\002" +
    "\001\001\000\004\017\172\001\001\000\004\024\214\001" +
    "\001\000\004\024\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\213\001\001\000\004\017\212\001" +
    "\001\000\004\017\211\001\001\000\004\017\210\001\001" +
    "\000\004\017\207\001\001\000\004\017\206\001\001\000" +
    "\004\017\205\001\001\000\004\017\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\005\223\007\222\010\220\011\012" +
    "\012\037\013\023\015\007\016\033\020\025\021\035\022" +
    "\005\025\016\026\032\032\026\041\031\044\004\001\001" +
    "\000\002\001\001\000\006\011\224\012\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\005\223\007\222\010\233" +
    "\011\012\012\037\013\023\015\007\016\033\020\025\021" +
    "\035\022\005\025\016\026\032\032\026\041\031\044\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_Cup$actions {
  private final Analizador_Cup parser;

  /** Constructor */
  CUP$Analizador_Cup$actions(Analizador_Cup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_Cup$do_action_part00000000(
    int                        CUP$Analizador_Cup$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Cup$parser,
    java.util.Stack            CUP$Analizador_Cup$stack,
    int                        CUP$Analizador_Cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Cup$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Cup$parser.done_parsing();
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= LCODIGO PROGRAMA 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= LCODIGO 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LCODIGO ::= DECCLASE 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("LCODIGO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LCODIGO ::= DECFUNCION 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("LCODIGO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LCODIGO ::= DECLIBRERIA 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("LCODIGO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LCODIGO ::= CODIGO 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("LCODIGO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECCLASE ::= CLASE ID DOSP TAB CODIGOCLASE 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("DECCLASE",2, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECCLASE ::= TAB CLASE ID DOSP TAB CODIGOCLASE 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("DECCLASE",2, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CODIGOCLASE ::= DECFUNCION 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("CODIGOCLASE",6, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CODIGOCLASE ::= CODIGO 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("CODIGOCLASE",6, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECFUNCION ::= TAB FUNP 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("DECFUNCION",3, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECFUNCION ::= TAB FUN 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("DECFUNCION",3, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECFUNCION ::= FUNP 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("DECFUNCION",3, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECFUNCION ::= FUN 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("DECFUNCION",3, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNP ::= FUNCION TIPO ID PARINI PARAMETROSR PARFIN DOSP TAB CODIGO 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("FUNP",7, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNP ::= FUNCION ID PARINI PARAMETROSR PARFIN DOSP TAB CODIGO 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("FUNP",7, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUN ::= FUNCION TIPO ID PARINI PARFIN DOSP TAB CODIGO 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("FUN",8, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUN ::= FUNCION ID PARINI PARFIN DOSP TAB CODIGO 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("FUN",8, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETROSR ::= TIPO ID COMA PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",10, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETROSR ::= TIPO ID 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",10, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CODIGO ::= DECVARIABLE PCOMA 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("CODIGO",5, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CODIGO ::= ESCRITURA PCOMA 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("CODIGO",5, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CODIGO ::= OPERACIONASIGNACION PCOMA 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("CODIGO",5, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CODIGO ::= CICLO 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("CODIGO",5, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CODIGO ::= CONDICION 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("CODIGO",5, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CODIGO ::= OPERARCHIVO PCOMA 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("CODIGO",5, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CODIGO ::= DECARCHIVO PCOMA 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("CODIGO",5, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECVARIABLE ::= TIPO VARIABLES 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("DECVARIABLE",11, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VARIABLES ::= ID COMA VARIABLES 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VARIABLES ::= ID 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO ::= TNUMERO 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO ::= CADENA 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACIONASIGNACION ::= ID IGUAL OPERACION 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("OPERACIONASIGNACION",34, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION ::= ID OPERACION1 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION ::= NUMERO OPERACION1 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION ::= ID 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION1 ::= SUMA OPERACION 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("OPERACION1",18, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION1 ::= RESTA OPERACION 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("OPERACION1",18, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION1 ::= MULT OPERACION 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("OPERACION1",18, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION1 ::= DIV OPERACION 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("OPERACION1",18, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION1 ::= MODULO OPERACION 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("OPERACION1",18, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION1 ::= POTENCIA OPERACION 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("OPERACION1",18, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION1 ::= CONJ OPERACION 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("OPERACION1",18, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION1 ::= DISY OPERACION 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("OPERACION1",18, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CICLO ::= CDESDE 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("CICLO",14, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CICLO ::= CPARACADA 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("CICLO",14, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CDESDE ::= DESDE PARINI VARDESDE MIENTRAS ID TIPOCOND NUMERO INCREMENTODEC NUMERO PARFIN ITERAR DOSP TAB CODIGO 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("CDESDE",19, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CDESDE ::= DESDE PARINI VARDESDE MIENTRAS ID TIPOCOND NUMERO PARFIN ITERAR DOSP TAB CODIGO 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("CDESDE",19, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VARDESDE ::= ID IGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("VARDESDE",21, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INCREMENTODEC ::= INCREMENTAR 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("INCREMENTODEC",23, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INCREMENTODEC ::= DECREMENTAR 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("INCREMENTODEC",23, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CODIGOS ::= TAB CODIGO CODIGOS 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("CODIGOS",33, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDICION ::= CONDICIONSI CODIGO TIPOCONDICION CODIGO 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPOCONDICION ::= SINOCOND 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("TIPOCONDICION",32, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPOCONDICION ::= SINON 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("TIPOCONDICION",32, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICIONSI ::= SI PARINI ID TIPOCOND NUMERO PARFIN ENTONCES DOSP 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("CONDICIONSI",24, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPOCOND ::= MENOR 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("TIPOCOND",22, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPOCOND ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("TIPOCOND",22, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPOCOND ::= DIGUAL 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("TIPOCOND",22, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SINOCOND ::= SINO PARINI ID TIPOCOND NUMERO PARFIN ENTONCES DOSP 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("SINOCOND",25, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SINON ::= SINO DOSP 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("SINON",26, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ESCRITURA ::= ESCRIBIR TIPOESCRITURA 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("ESCRITURA",12, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPOESCRITURA ::= ID COMA TIPOESCRITURA 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("TIPOESCRITURA",27, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPOESCRITURA ::= TEXTO COMA TIPOESCRITURA 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("TIPOESCRITURA",27, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.elementAt(CUP$Analizador_Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPOESCRITURA ::= ID 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("TIPOESCRITURA",27, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPOESCRITURA ::= TEXTO 
            {
              Object RESULT =null;

              CUP$Analizador_Cup$result = parser.getSymbolFactory().newSymbol("TIPOESCRITURA",27, ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Cup$stack.peek()), RESULT);
            }
          return CUP$Analizador_Cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_Cup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_Cup$do_action(
    int                        CUP$Analizador_Cup$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Cup$parser,
    java.util.Stack            CUP$Analizador_Cup$stack,
    int                        CUP$Analizador_Cup$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_Cup$do_action_part00000000(
                               CUP$Analizador_Cup$act_num,
                               CUP$Analizador_Cup$parser,
                               CUP$Analizador_Cup$stack,
                               CUP$Analizador_Cup$top);
    }
}

}
